#include "packet/packet.h"
#include "packet/eth_packet.h"
#include "packet/arp_packet.h"
#include "packet/utils/utils.h"

#include <assert.h>

void ParseTest()
{
  using namespace PacketHacker;

  uint8_t data[42] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0x08, 0x00, 0x20, 0x1A, 0x1B, 0xDE, 0xC6, 0x0B, 0x6D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x0B, 0x6D, 0x0A };
  EthernetPacket *eth = new EthernetPacket(data, 42);
  printf("%s", eth->ToString().c_str());
  delete eth;
}

void MatchReplyTest()
{
  using namespace PacketHacker;
  uint8_t sent[42] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x15, 0x5d, 0x40, 0xaf, 0x88, 0x08, 0x06, 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x15, 0x5d, 0x40, 0xaf, 0x88, 0xac, 0x12, 0x0f, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x12, 0x0f, 0xdf };
  uint8_t received[42] = { 0x00, 0x15, 0x5d, 0x40, 0xaf, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x12, 0x0f, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x12, 0x0f, 0xd1 };
  EthernetPacket *eth1 = new EthernetPacket(sent, 42);
  EthernetPacket *eth2 = new EthernetPacket(received, 42);
  printf("%s\n", eth1->ToString().c_str());
  printf("%s\n", eth2->ToString().c_str());
  if (eth1->DoesReplyMatch(received, 42)) {
    printf("Reply matched\n");
  }
  delete eth1;
  delete eth2;
}

int main()
{
  // eth->SetInnerPacket(arp);
  // eth->SetDst("ff:ff:ff:ff:ff:ff");
  // eth->SetSrc("00:11:22:33:44:55");
  // eth->SetType("0x0806");
  // arp->SetHardwareType("0x0001");
  // arp->SetProtocolType("0x0800");
  // arp->SetHardwareLength("0x06");
  // arp->SetProtocolLength("0x04");
  // arp->SetOpcode("0x0001");
  // arp->SetSenderMac("00:11:22:33:44:55");
  // arp->SetSenderIp("192.168.1.12");
  // arp->SetTargetMac("00:00:00:00:00:00");
  // arp->SetTargetIp("192.168.1.1");
  // uint8_t data[42]{};
  // eth->WriteToBuf(data, 42);
  // for (int i = 0; i < 42; i++) {
  //   printf("%.2x ", data[i]);
  // }
  // printf("\n");
  // AdapterInfo info = Utils::GetAdapters()[4];
  // printf("%ws\n", info.friendlyName.c_str());
  // Utils::SendPacket(info, data, 42);
  MatchReplyTest();

  return 0;
}